from pydantic import BaseModel,Field
from typing_extensions import TypedDict,List, Any

class DocumentEditorState(TypedDict):
   summary: str = Field(
                    default="",
                    description=(
                        "A concise, refined summary capturing only the key and important points extracted "
                        "from the original document. This summary serves as the distilled editorial content "
                        "that highlights essential information to support future article generation."
                    )
                )       

class ArticleWritter(TypedDict):
    article: str = Field(
                    default="",
                    description=(
                        "A detailed, well-structured, and polished article on the given topic, "
                        "written clearly and comprehensively to serve as high-quality content for readers."
                    )
                )
        
class AgentState(BaseModel):
    query: str = Field(
        default='',
        description="The original user search query or input string."
    )
    links: List[str] = Field(
        default=[],
        description="List of URLs retrieved from the web search based on the query."
    )
    reranked_docs: List[Any] = Field(
        default=[],
        description="List of documents or content items, reordered by their relevance after re-ranking."
    )
    context: str = Field(
        default='',
        description="Consolidated and refined context extracted from the re-ranked documents, used to guide article generation."
    )
    article: str = Field(
        default='',
        description="The final detailed and well-written article generated by the article_writer_node."
    )
    reranked_urls: List[Any] = Field(
        default=[],
        description="List of re-reanked URLs retrieved from the web search based on the query."
    )